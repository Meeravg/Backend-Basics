1. Write Mongo query to retrieve the unique citye's from the buyers address as "\_id".
ans- sampleData> db.buyers.aggregate([{$group:{_id:"$address.city"}}])
[ { _id: 'Los Angeles' }, { _id: 'New York' } ]

2. Write Mongo query to retrieve the unique zip from the buyers address as "\_id".
ans- sampleData> db.buyers.aggregate([{$group:{_id:"$address.zip"}}])
[ { _id: '90001' }, { _id: '10001' } ]

3. Write Mongo query to retrieve the unique order_id in ascending order from the order_details.
ans- sampleData> db.order_details.aggregate([{$group:{_id:"order_id"}},{$sort:{"_id":1}}])
[ { _id: 'order_id' } ]

4. Write Mongo query to retrieve the unique customer_id from the orders.
ans- sampleData> db.orders.aggregate([{$group:{_id:"$customer_id"}}])
[ { _id: 1 }, { _id: 2 } ]

5. Write Mongo query to retrieve the unique paymentMethod's from the payments collection as "\_id".
ans- sampleData> db.payments.aggregate([{$group:{_id:"$paymentMethod"}}])
[ { _id: 'UPI' }, { _id: 'Debit Card' } ]

6. Write Mongo query to retrieve the unique paymentstatus's from the payments collection as "\_id".
ans- sampleData> db.payments.aggregate([{$group:{_id:"$paymentstatus"}}])
[ { _id: 'pending' }, { _id: 'success' } ]

7. Write Mongo query to retrieve the unique category_id product from products.
ans- sampleData> db.products.aggregate([{$group:{_id:"$category_id"}}])
[ { _id: 1 } ]

8. Write a MongoDB query to aggregate the total sales per customer and list the top 5 customers by total sales amount. Include the customer's ID and their total sales in the output.
ans- sampleData> db.orders.aggregate([{$group:{_id:"$customer_id", totalSales:{$sum:"$total"}}}, {$sort:{totalSales:-1}}, {$limit:5}])
[ { _id: 2, totalSales: 1120 }, { _id: 1, totalSales: 50.25 } ]

9. Aggregate the orders to count how many there are per status and show only the first 3 statuses based on the aggregated count.
ans- sampleData> db.orders.aggregate([{$group:{_id:"$status", count:{$sum:1}}},{$sort:{count:-1}}, {$limit:3}])
[ { _id: 'shipped', count: 1 }, { _id: 'pending', count: 1 } ]

10. Write a MongoDB query to calculate the total amount of payments that have a success status.
ans- sampleData> db.payments.aggregate([{$match:{paymentstatus:"success"}},{$group:{_id:null, TotalAmount:{$sum:"$amount"}}}])
[ { _id: null, TotalAmount: 50.25 } ]

11. Aggregate suppliers to find the one with the highest total quantity of products supplied, filtering to only include suppliers with a total product quantity greater than 100.
ans- sampleData> db.products.aggregate([{$group:{_id:"supplier_id", totalQuantity:{$sum:"$quantity"}}}, {$match:{totalQuantity:{$gt:100}}}, {$limit:1}])
[ { _id: 'supplier_id', totalQuantity: 150 } ]

12. Write a MongoDB query to find the top-selling product category based on total sales revenue.
ans- 